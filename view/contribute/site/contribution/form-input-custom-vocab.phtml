<?php
/**
 * @var \Laminas\View\Renderer\PhpRenderer $this
 * @var \Omeka\Api\Representation\SiteRepresentation $site
 * @var \Omeka\Form\ResourceForm $form
 * @var \Omeka\Entity\User $user
 * @var \Omeka\Api\Representation\AbstractResourceEntityRepresentation|null $resource
 * @var \Contribute\Api\Representation\ContributionRepresentation|null $contribution
 * @var array $fields
 * @var string $action "add" or "edit"
 * @var string $submitLabel
 *
 * @var \Laminas\View\Helper\EscapeHtml $escape
 * @var \Laminas\I18n\View\Helper\Translate $translate
 * @var \Laminas\View\Helper\EscapeHtmlAttr $escapeAttr
 * @var \Omeka\Api\Manager $apiManager
 * @var bool $hasValueSuggest
 * @var ?array $customVocabBaseTypes
 *
 * @var array $valueResourceTypes
 * @var array $valueResourceQueries
 * @var callable $shortResourceTitle
 *
 * @var array $field
 * @var string $term
 * @var int $indexFieldInput
 * @var \Omeka\Api\Representation\PropertyRepresentation $property
 * @var ?\Omeka\Api\Representation\ValueRepresentation $value
 * @var ?array $fieldContribution
 * @var ?int $indexContribution
 *
 * @uses \CustomVocab\DataType\CustomVocab
 */

$original = $fieldContribution['original'];
$proposed = $fieldContribution['proposed'];
$isPrivate = $value ? !$value->isPublic() : ($field['template_property'] ? $field['template_property']->isPrivate() : false);
$isRequired = !empty($fieldContribution['required']) && (($indexContribution ?? null) === 0);

$class = ['value'];
if ($isPrivate):
    $class[] = 'private';
endif;
$language = isset($proposed['@value']) ? null : (isset($original['value']) ? $original['value']->lang() : null);

// Prepare select, that can be a list of keywords, a list of items from an item set or a list or uri/labels.
// Because the form element cannot be get directly, a quick replacement is done.
$customVocabId = (int) substr($fieldContribution['type'], 12);
$customVocabType = $customVocabBaseTypes[$customVocabId] ?? 'literal';
$typeName = $customVocabType === 'literal' ? 'value' : $customVocabType;
$customVocab = $apiManager->read('custom_vocabs', ['id' => $customVocabId])->getContent();
$selectHtml = (new \CustomVocab\DataType\CustomVocab($customVocab))->form($this);
$replace = [
    'name="customvocab"' => 'name="' . $term . '[' . $indexFieldInput . '][@' . $typeName . ']"',
    'class="terms&#x20;to-require' => 'class="form-control customvocab-input'
        . '" aria-labelledby="property-' . $property->id() . '-label"'
        . ($isRequired ? ' required="required"' : ''),
    '"value_resource_id"' => '"@resource"',
    '"@id"' => '"@uri"',
];

$val = $proposed['@' . $typeName] ?? $original['@' . $typeName] ?? '';

if (strlen((string) $val)) {
    $escapedVal = $escapeAttr($val);
    $replace['<option value="' . $escapedVal . '"'] = '<option value="' . $escapedVal . '" selected="selected"';
}
?>

<div class="<?= implode(' ', $class) ?>" lang="<?= $escape($language) ?>" data-basetype="<?= $customVocabType ?>">
    <?php if ($language): ?>
    <span class="language"><?= $language ?></span>
    <?php endif; ?>
    <?= str_replace(array_keys($replace), array_values($replace), $selectHtml) ?>
</div>
