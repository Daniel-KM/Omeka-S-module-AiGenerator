<?php
/**
 * @var \Laminas\View\Renderer\PhpRenderer $this
 * @var \Omeka\Api\Representation\SiteRepresentation $site
 * @var \Omeka\Entity\User|null $user
 * @var \Generate\Form\GenerateForm $form
 * @var \AdvancedResourceTemplate\Api\Representation\ResourceTemplateRepresentation|null $resourceTemplate
 * @var \Generate\Api\Representation\GenerationRepresentation|null $generation
 * @var \Omeka\Api\Representation\AbstractResourceEntityRepresentation|null $resource
 * @var array $fields
 * @var \Omeka\Api\Representation\ResourceTemplateRepresentation|null $templateMedia A sub template for media may have no fields.
 * @var array $fieldsByMedia
 * @var array $fieldsMediaBase
 * @var string $action "add" or "edit" or "show"
 * @var string $mode "read" (for template select or for show readonly form before submit) or "write"
 * @var string $space "default" or "guest"
 *
 * @var string $submitLabel
 * @var string $cancelLabel
 * @var bool $isMainForm
 * @var bool $skipGenerateCss
 *
 * When called recursively for sub-fields (media):
 * @var ?int $indexMedia
 * @var array $fieldsMedia
 */

// See common/resource-values.

$plugins = $this->getHelperPluginManager();
$url = $plugins->get('url');
$partial = $plugins->get('partial');
$hyperlink = $plugins->get('hyperlink');
$formElement = $plugins->get('formElement');

$vars = $this->vars();
$labelInfo = $this->siteSetting('property_label_information') ?? $this->setting('property_label_information');

// Prepare variables one time for the form and all sub-forms.
if ($isMainForm) {
    // No echo: only includes variables, css, and js.
    $partial('generate/site/generation/form-include');
    /**
     * @var \Laminas\View\HelperPluginManager $plugins
     * @var \Laminas\View\Helper\Url $url
     * @var \Laminas\View\Helper\Partial $partial
     * @var \Laminas\View\Helper\EscapeHtml $escape
     * @var \Laminas\I18n\View\Helper\Translate $translate
     * @var \Laminas\View\Helper\EscapeHtmlAttr $escapeAttr
     * @var \Omeka\Api\Manager $apiManager
     * @var \Common\Stdlib\EasyMeta $easyMeta
     * @var array $valueResourceTypes
     * @var array $valueResourceQueries
     * @var callable $shortResourceTitle
     * @var string $baseUrlFiles
     * @var string $mode "read" (for template) or "write"
     */
    $generateVars = $plugins
        ->get(\Laminas\View\Helper\ViewModel::class)
        ->getRoot()
        ->getVariable('generateVars') ?? [];
    extract($generateVars);
    $vars = $this->setVars(new \Laminas\View\Variables($generateVars))->vars();
    unset($generateVars);
}

// To wrap the elements with a disabled fieldset makes the whole form disabled.
$disabled = $mode === 'read' ? ' disabled="disabled"' : '';
?>

<?php if ($isMainForm): ?>
<div class="generate main-form">
    <?= $this->form()->openTag($form) ?>
        <?php $this->trigger("view.$action.form.before", ['form' => $form]); ?>
        <fieldset class="generate-resource main-form"<?= $disabled ?> data-resource-template-id="<?= $templateMedia ? $templateMedia->id() : '' ?>" data-resource-class-id="<?= $templateMedia && $templateMedia->resourceClass() ? $templateMedia->resourceClass()->id() : '' ?>">
    <?php endif; ?>

            <?php // Display the special field for media file (required, not a property, and cannot be set in resource template). ?>
            <?php if (!$isMainForm):
                // Only one file is allowed by media and it cannot be updated, like in Omeka.
                $file = $fieldsMedia['file']['generations'][0]['proposed']['store'] ?? null;
            ?>
            <div class="property" data-term="file">
                <h4><?= $escape($translate('Upload')) ?></h4>
                <?php if ($file): ?>
                <div class="values">
                    <div class="value">
                        <a href="<?= $escapeAttr($baseUrlFiles . '/generation/' . $file) ?>" download="download" target="_self"><?= $escape($fieldsMedia['file']['generations'][0]['proposed']['@value']) ?></a>
                        <input type="hidden"  name="media[<?= $indexMedia ?>][file][0][store]" value="<?= $escapeAttr($file) ?>"/>
                        <input type="hidden"  name="media[<?= $indexMedia ?>][file][0][@value]" value="<?= $escapeAttr($fieldsMedia['file']['generations'][0]['proposed']['@value']) ?>"/>
                    </div>
                </div>
                <?php else: ?>
                <div class="values">
                    <div class="value">
                        <input type="file" class="form-control input-value" data-value-key="@value" name="media[<?= $indexMedia ?>][file][0][@value]" required="required"/>
                    </div>
                </div>
                <?php endif; ?>
            </div>
            <?php endif; ?>

            <?php // Display the edited resource, with edited or non-edited fields, plus the non-editable original fields. ?>

            <?php foreach ($isMainForm ? $fields : $fieldsMedia as $term => $field):
                /**
                 * @var \AdvancedResourceTemplate\Api\Representation\ResourceTemplatePropertyDataRepresentation $templateProperty
                 * @var \Omeka\Api\Representation\PropertyRepresentation $property
                 */
                if ($term === 'file') continue;
                // Don't display empty values that are not fillable.
                if (empty($field['generations']) && !$field['fillable']) continue;
                $indexFieldInput = 0;
                $templateProperty = $field['template_property'];
                $property = $field['property'];
                $vars->offsetSet('field', $field);
                $vars->offsetSet('term', $term);
                $vars->offsetSet('property', $property);
                $vars->offsetSet('indexFieldInput', $indexFieldInput);
                $vars->offsetSet('templateProperty', $templateProperty);
                ?>

            <div class="property" data-term="<?= $term ?>" data-property-id="<?= $easyMeta->propertyId($term) ?>">
                <?php // Display property label. ?>
                <h4>
                    <?= isset($field['alternate_label']) ? $escape($field['alternate_label']) : $escape($translate($property->label())) ?>
                    <?php if (!isset($field['property'])):?>
                    <?php // Nothing to do (file). ?>
                    <?php elseif ($labelInfo === 'term'): ?>
                    <span class="field-term">(<?= $escape($field['property']->term()) ?>)</span>
                    <?php elseif ($labelInfo === 'vocab'): ?>
                    <span class="field-term">(<?= $escape($field['property']->vocabulary()->label()) ?>)</span>
                    <?php endif; ?>
                </h4>

                <?php // Simple display of the value for properties that are not editable or without data types. ?>

                <?php if (!$field['editable'] && !$field['fillable'] || !count($field['datatypes'])): ?>
                <div class="values">
                    <?php
                    foreach ($field['values'] as $value):
                        $vars->offsetSet('value', $value);
                        echo $partial('generate/site/generation/form-value');
                    endforeach; ?>
                </div>
                <?php // Early end this property and continue to next fields. ?>
            <?= '</div>' ?>
                    <?php continue;
                    endif; ?>

                <?php // Editable fields, that may have been edited or not. ?>
                <?php // Some generations may be empty (minimum number of values, or a required one). ?>

                <div class="values">
                    <?php
                    foreach ($field['generations'] as $indexGeneration => $fieldGeneration) {
                        // TODO Utiliser main type plutÃ´t que type colon.
                        /** @var \Omeka\Api\Representation\ValueRepresentation $value */
                        $value = $fieldGeneration['original']['value'];
                        if (!$value && !$field['fillable']) continue;
                        $typeColon = strtok((string) $fieldGeneration['type'], ':');
                        $vars->offsetSet('indexGeneration', $indexGeneration);
                        $vars->offsetSet('fieldGeneration', $fieldGeneration);
                        $vars->offsetSet('value', $value);
                        // Check if the value exists or is editable (the value may be empty).
                        if ($value && !$field['editable']) {
                            echo $partial('generate/site/generation/form-value');
                        } else {
                            switch ($fieldGeneration['type']) {
                                // Check special cases first in a switch.
                                case $typeColon === 'customvocab':
                                    echo $partial('generate/site/generation/form-input-custom-vocab');
                                    break;
                                case $typeColon === 'valuesuggest':
                                case $typeColon === 'valuesuggestall':
                                    echo $partial('generate/site/generation/form-input-value-suggest');
                                    break;
                                case 'numeric:integer':
                                    echo $partial('generate/site/generation/form-input-numeric-integer');
                                    break;
                                case 'numeric:timestamp':
                                    echo $partial('generate/site/generation/form-input-numeric-timestamp');
                                    break;
                                case 'literal':
                                    echo $partial('generate/site/generation/form-input-literal');
                                    break;
                                case 'resource':
                                case 'resource:item':
                                case 'resource:media':
                                case 'resource:itemset':
                                    echo $partial('generate/site/generation/form-input-resource');
                                    break;
                                case 'uri':
                                    echo $partial('generate/site/generation/form-input-uri');
                                    break;
                                default:
                                    // Other data types are not yet editable.
                                    if ($value):
                                        echo $partial('generate/site/generation/form-value');
                                    endif;
                                    break;
                            }
                        }
                        ++$indexFieldInput;
                        $vars->offsetSet('indexFieldInput', $indexFieldInput);
                    }
                    ?>
                </div>

                <?php // Add a button to add a new value for fillable properties. ?>
                <?php // The button is always added to manage value removing: if not fillable, it is hidden here and via js. ?>
                <?= $partial('generate/site/generation/form-value-more') ?>

            </div>
            <?php endforeach; // Next field/property. ?>

    <?php if ($isMainForm): ?>
        </fieldset>

        <?php if (!empty($templateMedia)): ?>
        <fieldset class="generate-medias sub-forms" data-next-index-media="<?= count($fieldsByMedia) ?>"<?= $disabled ?>>
            <?php // For end user, "media" means "files". // TODO Add other types of media. ?>
            <legend><?= $escape($translate('Files')) ?></legend>
            <?php
            $vars->offsetSet('isMainForm', false);
            $indexMedia = 0;
            foreach ($fieldsByMedia as $fieldsMedia): ?>
            <fieldset class="generate-media sub-form" name="media[<?= $indexMedia ?>]" data-index-media="<?= $indexMedia ?>">
                <legend><?= $escape(sprintf($translate('File %s'), $indexMedia + 1)) ?></legend>
                <?php
                $vars->offsetSet('indexMedia', $indexMedia);
                $vars->offsetSet('fieldsMedia', $fieldsMedia);
                ?>
                <?= $partial('generate/site/generation/form') ?>
                <ul class="actions resource-edit-remove-value">
                    <li><button type="button" class="remove-media button o-icon-delete"><?= $escape($translate('Remove file')) ?></button></li>
                </ul>
            </fieldset>
            <?php ++$indexMedia; ?>
            <?php endforeach; ?>
            <div class="inputs inputs-media resource-edit-add-value">
                <button type="button" class="add-media-new button o-icon-add"><?= $escape($translate('Add file')) ?></button>
            </div>
        </fieldset>
        <?php
        $indexMedia = null;
        $fieldsMedia = [];
        $vars->offsetSet('isMainForm', true);
        $vars->offsetSet('indexMedia', $indexMedia);
        $vars->offsetSet('fieldsMedia', $fieldsMedia);
        ?>
        <?php endif; // End template media. ?>

        <?= $formElement($form->get('template')) ?>
        <?php // These values are designed to be customized for complex workflow, or used with submit or any button. ?>
        <?php // Don't forget to set attribute "form" when used outside of the form. ?>
        <?php // TODO Step is probably to be remove ; used only to check the template for now. ?>
        <?= $formElement($form->get('step')) ?>
        <?php //= $formElement($form->get('next')) ?>
        <?php //= $formElement($form->get('mode')) ?>
        <?= $mode === 'read' ? '' : $formElement($form->get('csrf')) ?>

        <?php $this->trigger("view.$action.form.after", ['form' => $form]); ?>
        <div id="page-actions" class="edit-mode-form-buttons">
            <?php if ($resource): ?>
            <?= $hyperlink($translate('Cancel'), $resource->siteUrl(), ['class' => 'button button-cancel', 'role' => 'button']) ?>
            <?php elseif (isset($cancelLabel)): ?>
            <?php //= TODO $this->cancelButton() ?>
            <?= $hyperlink(
                $cancelLabel,
                $generation
                    ? $generation->siteUrl(null, false, 'view', $space === 'guest')
                    : ($space === 'guest'
                            ? $url('site/guest/generation', [], true)
                            : $url('site/resource', ['controller' => 'item', 'action' => 'browse'], true)),
                ['class' => 'button button-cancel', 'role' => 'button'])
            ?>
            <?php endif; ?>
            <?= $formElement($form->get('submit')->setAttribute('class', 'button button-validate')->setValue($submitLabel)) ?>
        </div>

    <?= $this->form()->closeTag() ?>

    <?php //= $partial('common/resource-form-templates') ?>
    <?= $partial('generate/site/generation/form-inputs-default') ?>

    <?php if (!empty($templateMedia) && !$resource): // TODO Make possible to edit media with item. ?>
    <div id="edit_template_media" class="generate_template media" style="display:none;" data-resource-template-id="<?= $templateMedia->id() ?>" data-resource-class-id="<?= $templateMedia->resourceClass() ? $templateMedia->resourceClass()->id() : '' ?>">
        <fieldset class="generate-media sub-form" name="media[]" data-index-media="">
            <legend><?= $escape($translate('File')) ?></legend>
            <?php
            $vars->offsetSet('isMainForm', false);
            $vars->offsetSet('indexMedia', null);
            $vars->offsetSet('fieldsMedia', $fieldsMediaBase);
            ?>
            <?= $partial('generate/site/generation/form') ?>
            <?php
            $vars->offsetSet('isMainForm', true);
            $vars->offsetSet('indexMedia', null);
            $vars->offsetSet('fieldsMedia', null);
            ?>
            <ul class="actions resource-edit-remove-value">
                <li><button type="button" class="remove-media button o-icon-delete"><?= $escape($translate('Remove file')) ?></button></li>
            </ul>
        </fieldset>
    </div>
    <?php endif; // End template media. ?>

</div>

<?php endif; // End isMainForm. ?>
