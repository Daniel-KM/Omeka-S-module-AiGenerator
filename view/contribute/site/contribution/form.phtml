<?php
/**
 * @var \Laminas\View\Renderer\PhpRenderer $this
 * @var \Omeka\Api\Representation\SiteRepresentation $site
 * @var \Contribute\Api\Representation\ContributionRepresentation|null $resource
 * @var \Contribute\Api\Representation\ContributionRepresentation|null $contribution
 * @var \Omeka\Form\ResourceForm $form
 * @var array $fields
 * @var array $fieldsByMedia
 * @var array $fieldsMediaBase
 * @var string $action "add" or "edit"
 * @var string $submitLabel
 * @var bool $isMainForm
 * When called recursively for sub-fields (media):
 * @var ?int $indexMedia
 * @var array $fieldsMedia
 */

// See common/resource-values.

$plugins = $this->getHelperPluginManager();
$url = $plugins->get('url');
$hyperlink = $plugins->get('hyperlink');
$formElement = $plugins->get('formElement');

$vars = $this->vars();
$labelInfo = $this->setting('property_label_information');

// Prepare variables one time for the form and all sub-forms.
if ($isMainForm) {

    $partial = $plugins->get('partial');
    $escape = $plugins->get('escapeHtml');
    $translate = $plugins->get('translate');
    $escapeAttr = $plugins->get('escapeHtmlAttr');

    // The api manager is needed to create select for Value Suggest.
    // TODO Replace apiManager by FormElementManager.
    $services = $site->getServiceLocator();
    $apiManager = $services->get('Omeka\ApiManager');
    $moduleManager = $services->get('Omeka\ModuleManager');
    $hasCustomVocab = ($module = $moduleManager->getModule('CustomVocab')) && $module->getState() === \Omeka\Module\Manager::STATE_ACTIVE;
    $hasValueSuggest = ($module = $moduleManager->getModule('ValueSuggest')) && $module->getState() === \Omeka\Module\Manager::STATE_ACTIVE;
    $hasNumericDataTypes = ($module = $moduleManager->getModule('NumericDataTypes')) && $module->getState() === \Omeka\Module\Manager::STATE_ACTIVE;

    if ($hasCustomVocab) {
        $CustomVocabBaseTypes = $plugins->get('customVocabBaseType');
        $CustomVocabBaseTypes = $CustomVocabBaseTypes();
    } else {
        $CustomVocabBaseTypes = null;
    }

    // Prepare resource selects.
    $valueResourceTypes = ['resource' => 'items', 'resource:item' => 'items', 'resource:itemset' => 'item_sets', 'resource:media' => 'media'];
    // TODO Use module advanced resource template to fill a property with a property query. They are always empty for now, except manually filled.
    $valueResourceQueries = [];
    $shortResourceTitle = function (\Omeka\Api\Representation\AbstractResourceEntityRepresentation $resource): string {
        return mb_substr($resource->displayTitle(), 0, 80);
    };

    $baseUrlFiles = $services->get('Config')['file_store']['local']['base_uri'] ?: rtrim($url('top'), '/') . '/files';

    $indexMedia = null;
    $fieldsMedia = [];

    // Avoid to prepare many variables in sub-templates.
    $vars = $vars->getArrayCopy();
    $vars['indexMedia'] = null;
    $vars['fieldsMedia'] = $fieldsMedia;
    $vars['partial'] = $partial;
    $vars['escape'] = $escape;
    $vars['translate'] = $translate;
    $vars['escapeAttr'] = $escapeAttr;
    $vars['apiManager'] = $apiManager;
    $vars['hasValueSuggest'] = $hasValueSuggest;
    $vars['hasNumericDataTypes'] = $hasNumericDataTypes;
    $vars['customVocabBaseTypes'] = $CustomVocabBaseTypes;
    $vars['valueResourceTypes'] = $valueResourceTypes;
    $vars['valueResourceQueries'] = $valueResourceQueries;
    $vars['shortResourceTitle'] = $shortResourceTitle;
    $vars['baseUrlFiles'] = $baseUrlFiles;
    $vars = $this->setVars(new \Laminas\View\Variables($vars))->vars();

    // Don't prepare form if there are no fields.
    // Use of a sub-form requires a main form.
    if (count($fields)) {
        // No echo: only includes css and js.
        $partial('contribute/site/contribution/form-include');
    }

    $form->prepare();
}
?>

<?php if ($isMainForm): ?>
<div class="contribute main-form">
    <?= $this->form()->openTag($form) ?>
    <?php $this->trigger("view.$action.form.before", ['form' => $form]); ?>
<?php endif; ?>

    <?php // Display the special field for media file (not a property, and cannot be set in resource template). ?>
    <?php if (!$isMainForm):
        // Only one file is allowed by media and it cannot be updated.
        $file = $fieldsMedia['file']['contributions'][0]['proposed']['store'] ?? null;
        ?>
    <div class="property">
        <h4><?= $translate('Upload') ?></h4>
        <?php if ($file): ?>
        <div class="values">
            <div class="value">
                <a href="<?= $escapeAttr($baseUrlFiles . '/contribution/' . $file) ?>" download="download"><?= $escape($fieldsMedia['file']['contributions'][0]['proposed']['@value']) ?></a>
            </div>
        </div>
        <?php else: ?>
        <div class="values">
            <div class="value">
                <input type="file" class="form-control input-value" data-value-key="@value" name="media[<?= $indexMedia ?>][file][0][@value]"/>
            </div>
        </div>
        <?php endif; ?>
    </div>
    <?php endif; ?>

    <?php // Display the edited resource, with edited or non-edited fields, plus the non-editable original fields. ?>

    <?php foreach ($isMainForm ? $fields : $fieldsMedia as $term => $field):
        if ($term === 'file') continue;
        // Don't display empty values that are not fillable.
        if (empty($field['contributions']) && !$field['fillable']) continue;
        $indexFieldInput = 0;
        $property = $field['property'];
        $vars->offsetSet('field', $field);
        $vars->offsetSet('term', $term);
        $vars->offsetSet('indexFieldInput', $indexFieldInput);
        $vars->offsetSet('property', $property);
        ?>

    <div class="property">
        <?php // Display property label. ?>
        <h4>
            <?= isset($field['alternate_label']) ? $escape($field['alternate_label']) : $escape($translate($property->label())) ?>
            <?php if (!isset($field['property'])):?>
            <?php // Nothing to do (file). ?>
            <?php elseif ($labelInfo === 'term'): ?>
            <span class="field-term">(<?= $escape($field['property']->term()) ?>)</span>
            <?php elseif ($labelInfo === 'vocab'): ?>
            <span class="field-term">(<?= $escape($field['property']->vocabulary()->label()) ?>)</span>
            <?php endif; ?>
        </h4>

        <?php // Simple display of the value for properties that are not editable or without datatypes. ?>

        <?php if (!$field['editable'] && !$field['fillable'] || !count($field['datatypes'])): ?>
        <div class="values">
            <?php
            foreach ($field['values'] as $value):
                $vars->offsetSet('value', $value);
                echo $partial('contribute/site/contribution/form-value');
            endforeach; ?>
        </div>
        <?php // Early end this property and continue to next fields. ?>
    <?= '</div>' ?>
            <?php continue;
            endif; ?>

        <?php // Editable fields, that may have been edited or not. ?>

        <div class="values">
           <?php // Display at least one prepared field for all required fields.
           foreach (count($field['contributions']) ? $field['contributions'] : [null] as $indexContribution => $fieldContribution):
               // There is no contribution: check if the field is required to display at least one field.
               if (is_null($fieldContribution)) {
                   if (empty($field['required']) || !($field['editable'] && $field['fillable'])) continue;
                   $valueType = reset($field['datatypes']);
                   if (!$valueType) continue;
                   $value = null;
                   // TODO Add the template property to get default privacy.
                   $fieldContribution = ['type' => $valueType, 'required' => true, 'original' => [], 'proposed' => [], 'template_property' => null];
               } else {
                   /** @var \Omeka\Api\Representation\ValueRepresentation $value */
                    $value = $fieldContribution['original']['value'];
                    if (!$value && !$field['fillable']) continue;
                    $typeColon = strtok((string) $fieldContribution['type'], ':');
                    $isNumeric = $typeColon === 'numeric';
                    $isCustomVocab = $typeColon === 'customvocab';
                    $isValueSuggest = $typeColon === 'valuesuggest' || $typeColon === 'valuesuggestall';
                    if ($isNumeric && !$hasNumericDataTypes) continue;
                    if ($isNumeric && !in_array($fieldContribution['type'], ['numeric:integer', 'numeric:timestamp'])) continue;
                    if ($isCustomVocab && !$hasCustomVocab) continue;
                    if ($isValueSuggest && !$hasValueSuggest) continue;
                }
                $vars->offsetSet('indexContribution', $indexContribution);
                $vars->offsetSet('fieldContribution', $fieldContribution);
                $vars->offsetSet('value', $value);
                // Check if the value exists or is editable (the value may be empty).
                if ($value && !$field['editable']):
                    echo $partial('contribute/site/contribution/form-value');
                else:
                    switch ($fieldContribution['type']):
                        case 'literal':
                            echo $partial('contribute/site/contribution/form-input-literal');
                            break;
                        case 'resource':
                        case 'resource:item':
                        case 'resource:media':
                        case 'resource:itemset':
                            echo $partial('contribute/site/contribution/form-input-resource');
                            break;
                        case 'uri':
                            echo $partial('contribute/site/contribution/form-input-uri');
                            break;
                        case 'numeric:integer':
                            echo $partial('contribute/site/contribution/form-input-numeric-integer');
                            break;
                        case 'numeric:timestamp':
                            echo $partial('contribute/site/contribution/form-input-numeric-timestamp');
                            break;
                        case $isCustomVocab:
                            echo $partial('contribute/site/contribution/form-input-custom-vocab');
                            break;
                        case $isValueSuggest:
                            echo $partial('contribute/site/contribution/form-input-value-suggest');
                            break;
                        default:
                            // Other datatypes are not yet editable.
                            if ($value):
                                echo $partial('contribute/site/contribution/form-value');
                            endif;
                            break;
                    endswitch;
                endif;
                ++$indexFieldInput;
                $vars->offsetSet('indexFieldInput', $indexFieldInput);
            endforeach;
            ?>
        </div>

        <?php // Add buttons to add a new value for fillable properties. ?>
        <?php if ($field['fillable']):
            if ($field['max_values']) {
                if (count($field['contributions']) >= $field['max_values'] ||
                    (!count($field['contributions']) && $field['required'] && $field['max_values'] <= 1)
                ) {
                    continue;
                }
            } ?>
        <?= $partial('contribute/site/contribution/form-value-more') ?>
        <?php endif; ?>

    </div>
    <?php endforeach; // Next field/property. ?>

<?php if ($isMainForm): ?>

    <?php if (count($fieldsMediaBase)): ?>
    <fieldset class="contribute-medias sub-forms" data-next-index-media="<?= count($fieldsByMedia) ?>">
        <?php // For end user, "media" means "files". ?>
        <legend><?= $escape($translate('Files')) ?></legend>
        <?php
        $vars->offsetSet('isMainForm', false);
        $indexMedia = 0;
        foreach ($fieldsByMedia as $fieldsMedia): ?>
        <fieldset class="contribute-media sub-form" name="media[<?= $indexMedia ?>]" data-index-media="<?= $indexMedia ?>">
            <legend><?= $escape(sprintf($translate('File %s'), $indexMedia + 1)) ?></legend>
            <?php
            $vars->offsetSet('indexMedia', $indexMedia);
            $vars->offsetSet('fieldsMedia', $fieldsMedia);
            ?>
            <?= $partial('contribute/site/contribution/form', $vars) ?>
        </fieldset>
        <?php ++$indexMedia; ?>
        <?php endforeach; ?>
        <div class="inputs inputs-media">
            <button type="button" class="add-media-new button o-icon-add"><?= $translate('Add file') ?></button>
        </div>
    </fieldset>
    <?php
    $indexMedia = null;
    $fieldsMedia = [];
    $vars->offsetSet('isMainForm', true);
    $vars->offsetSet('indexMedia', $indexMedia);
    $vars->offsetSet('fieldsMedia', $fieldsMedia);
    ?>
    <?php endif; ?>

    <?= $formElement($form->get('template')) ?>
    <?= $formElement($form->get('csrf')) ?>

    <?php $this->trigger("view.$action.form.after", ['form' => $form]); ?>

    <div id="page-actions">
        <?php if ($contributionResource = $contribution && $contribution->resource() ? $contribution->resource() : null): ?>
        <?= $hyperlink($translate('Go back to resource'), $url('site/resource-id', ['controller' => $contributionResource->getControllerName(), 'action' => 'show'], true), ['class' => 'btn btn-danger text-light', 'role' => 'button']) ?>
        <?php else: ?>
        <?php $routeResourceControllerName = $this->params()->fromRoute('resource'); ?>
        <?php //= $this->cancelButton() ?>
        <?= $hyperlink($translate('Cancel'), $url('site/resource', ['controller' => $routeResourceControllerName === 'contributions' ? 'items' : $routeResourceControllerName === 'contributions', 'action' => 'browse'], true),
            ['class' => 'button button-cancel', 'role' => 'button']) ?>
        <?php endif; ?>
        <button type="submit" name="edit-resource-submit" class="button"><?= $escape($submitLabel) ?></button>
    </div>

    <?= $this->form()->closeTag() ?>

    <?php //= $partial('common/resource-form-templates') ?>
    <?= $partial('contribute/site/contribution/form-inputs-default') ?>

    <?php if (count($fieldsMediaBase)): ?>
    <div id="edit_template_media" class="contribute_template media" style="display:none;">
        <fieldset class="contribute-media sub-form" name="media[]" data-index-media="">
            <legend><?= $escape($translate('File')) ?></legend>
            <?php
            $vars->offsetSet('isMainForm', false);
            $vars->offsetSet('indexMedia', null);
            $vars->offsetSet('fieldsMedia', $fieldsMediaBase);
            ?>
            <?= $partial('contribute/site/contribution/form', $vars) ?>
            <?php
            $vars->offsetSet('isMainForm', true);
            $vars->offsetSet('indexMedia', null);
            $vars->offsetSet('fieldsMedia', null);
            ?>
        </fieldset>
    </div>
    <?php endif; ?>

</div>

<?php endif; ?>
