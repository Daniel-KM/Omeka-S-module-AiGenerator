<?php
/**
 * @var \Laminas\View\Renderer\PhpRenderer $this
 * @var \Omeka\Api\Representation\SiteRepresentation $site
 * @var \Omeka\Form\ResourceForm $form
 * @var \Omeka\Entity\User $user
 * @var \Omeka\Api\Representation\AbstractResourceEntityRepresentation|null $resource
 * @var \Contribute\Api\Representation\ContributionRepresentation|null $contribution
 * @var array $fields
 * @var string $action "add" or "edit"
 * @var string $submitLabel
 */

// See common/resource-values.

$plugins = $this->getHelperPluginManager();
$partial = $plugins->get('partial');
$escape = $plugins->get('escapeHtml');
$translate = $plugins->get('translate');
$hyperlink = $plugins->get('hyperlink');
$escapeAttr = $this->plugin('escapeHtmlAttr');
$formElement = $this->plugin('formElement');

// The api manager is needed to create select for Value Suggest.
// TODO Replace apiManager by FormElementManager.
$apiManager = $site->getServiceLocator()->get('Omeka\ApiManager');
$moduleManager = $site->getServiceLocator()->get('Omeka\ModuleManager');
$hasCustomVocab = ($module = $moduleManager->getModule('CustomVocab')) && $module->getState() === \Omeka\Module\Manager::STATE_ACTIVE;
$hasValueSuggest = ($module = $moduleManager->getModule('ValueSuggest')) && $module->getState() === \Omeka\Module\Manager::STATE_ACTIVE;
$hasNumericDataTypes = ($module = $moduleManager->getModule('NumericDataTypes')) && $module->getState() === \Omeka\Module\Manager::STATE_ACTIVE;

if ($hasCustomVocab) {
    $CustomVocabBaseTypes = $plugins->get('customVocabBaseType');
    $CustomVocabBaseTypes = $CustomVocabBaseTypes();
} else {
    $CustomVocabBaseTypes = null;
}

$vars = $this->vars();

$vars->offsetSet('escape', $escape);
$vars->offsetSet('translate', $translate);
$vars->offsetSet('escapeAttr', $escapeAttr);
$vars->offsetSet('apiManager', $apiManager);
$vars->offsetSet('hasValueSuggest', $hasValueSuggest);
$vars->offsetSet('hasNumericDataTypes', $hasNumericDataTypes);
$vars->offsetSet('customVocabBaseTypes', $CustomVocabBaseTypes);

// Prepare resource selects.
$valueResourceTypes = ['resource' => 'items', 'resource:item' => 'items', 'resource:itemset' => 'item_sets', 'resource:media' => 'media'];
// TODO Use module advanced resource template to fill a property with a property query. They are always empty for now, except manually filled.
$valueResourceQueries = [];
$shortResourceTitle = function (\Omeka\Api\Representation\AbstractResourceEntityRepresentation $resource): string {
    return mb_substr($resource->displayTitle(), 0, 80);
};

$vars->offsetSet('valueResourceTypes', $valueResourceTypes);
$vars->offsetSet('valueResourceQueries', $valueResourceQueries);
$vars->offsetSet('shortResourceTitle', $shortResourceTitle);

// Store in js basic config of the fields.
$simpleFields = $fields;
foreach ($simpleFields as &$simpleField) {
    unset($simpleField['template_property'], $simpleField['property'], $simpleField['alternate_comment'], $simpleField['alternate_label'], $simpleField['values'], $simpleField['contributions']);
}
$this->headScript()
    ->appendScript(sprintf('const fields = %s;', json_encode($simpleFields, 320)));

$form->prepare();

$labelInfo = $this->setting('property_label_information');
?>

<div class="contribute-main-form">
    <?= $this->form()->openTag($form) ?>

    <?php $this->trigger("view.$action.form.before", ['form' => $form]); ?>

    <?php // Display the edited resource, with edited or non-edited fields, plus the non-editable original fields. ?>

    <?php foreach ($fields as $term => $field):
        // Don't display empty values that are not fillable.
        if (empty($field['contributions']) && !$field['fillable']) continue;
        $indexFieldInput = 0;
        $property = $field['property'];
        $vars->offsetSet('field', $field);
        $vars->offsetSet('term', $term);
        $vars->offsetSet('indexFieldInput', $indexFieldInput);
        $vars->offsetSet('property', $property);
        ?>

    <div class="property">
        <?php // Display property label. ?>
        <h4>
            <?= isset($field['alternate_label']) ? $escape($field['alternate_label']) : $escape($translate($property->label())) ?>
            <?php if ($labelInfo === 'term'): ?>
            <span class="field-term">(<?= $escape($field['property']->term()) ?>)</span>
            <?php elseif ($labelInfo === 'vocab'): ?>
            <span class="field-term">(<?= $escape($property->vocabulary()->label()) ?>)</span>
            <?php endif; ?>
        </h4>

        <?php // Simple display of the value for properties that are not editable or without datatypes. ?>

        <?php if (!$field['editable'] && !$field['fillable'] || !count($field['datatypes'])): ?>
        <div class="values">
            <?php
            foreach ($field['values'] as $value):
                $vars->offsetSet('value', $value);
                echo $partial('contribute/site/contribution/form-value');
            endforeach; ?>
        </div>
        <?php // Early end this property and continue to next fields. ?>
    <?= '</div>' ?>
            <?php continue;
            endif; ?>

        <?php // Editable fields, that may have been edited or not. ?>

        <div class="values">
           <?php // Display at least one prepared field for all required fields.
           foreach (count($field['contributions']) ? $field['contributions'] : [null] as $indexContribution => $fieldContribution):
               // There is no contribution: check if the field is required to display at least one field.
               if (is_null($fieldContribution)) {
                   if (empty($field['required']) || !($field['editable'] && $field['fillable'])) continue;
                   $valueType = reset($field['datatypes']);
                   if (!$valueType) continue;
                   $value = null;
                   // TODO Add the template property to get default privacy.
                   $fieldContribution = ['type' => $valueType, 'required' => true, 'original' => [], 'proposed' => [], 'template_property' => null];
               } else {
                   /** @var \Omeka\Api\Representation\ValueRepresentation $value */
                    $value = $fieldContribution['original']['value'];
                    if (!$value && !$field['fillable']) continue;
                    $typeColon = strtok((string) $fieldContribution['type'], ':');
                    $isNumeric = $typeColon === 'numeric';
                    $isCustomVocab = $typeColon === 'customvocab';
                    $isValueSuggest = $typeColon === 'valuesuggest' || $typeColon === 'valuesuggestall';
                    if ($isNumeric && !$hasNumericDataTypes) continue;
                    if ($isNumeric && !in_array($fieldContribution['type'], ['numeric:integer'])) continue;
                    if ($isCustomVocab && !$hasCustomVocab) continue;
                    if ($isValueSuggest && !$hasValueSuggest) continue;
                }
                $vars->offsetSet('indexContribution', $indexContribution);
                $vars->offsetSet('fieldContribution', $fieldContribution);
                $vars->offsetSet('value', $value);
                // Check if the value exists or is editable (the value may be empty).
                if ($value && !$field['editable']):
                    echo $partial('contribute/site/contribution/form-value');
                else:
                    switch ($fieldContribution['type']):
                        case 'literal':
                            echo $partial('contribute/site/contribution/form-input-literal');
                            break;
                        case 'resource':
                        case 'resource:item':
                        case 'resource:media':
                        case 'resource:itemset':
                            echo $partial('contribute/site/contribution/form-input-resource');
                            break;
                        case 'uri':
                            echo $partial('contribute/site/contribution/form-input-uri');
                            break;
                        case 'numeric:integer':
                            echo $partial('contribute/site/contribution/form-input-numeric-integer');
                            break;
                        case $isCustomVocab:
                            echo $partial('contribute/site/contribution/form-input-custom-vocab');
                            break;
                        case $isValueSuggest:
                            echo $partial('contribute/site/contribution/form-input-value-suggest');
                            break;
                        default:
                            // Other datatypes are not yet editable.
                            if ($value):
                                echo $partial('contribute/site/contribution/form-value');
                            endif;
                            break;
                    endswitch;
                endif;
                ++$indexFieldInput;
                $vars->offsetSet('indexFieldInput', $indexFieldInput);
            endforeach;
            ?>
        </div>

        <?php // Add buttons to add a new value for fillable properties. ?>
        <?php if ($field['fillable']):
            if ($field['max_values']) {
                if (count($field['contributions']) >= $field['max_values'] ||
                    (!count($field['contributions']) && $field['required'] && $field['max_values'] <= 1)
                ) {
                    continue;
                }
            } ?>
        <?= $partial('contribute/site/contribution/form-value-more') ?>
        <?php endif; ?>

    </div>
    <?php endforeach; // Next field/property. ?>

    <?= $formElement($form->get('template')) ?>
    <?= $formElement($form->get('csrf')) ?>

    <?php $this->trigger("view.$action.form.after", ['form' => $form]); ?>

    <div id="page-actions">
        <?php if ($resource): ?>
        <?= $hyperlink($translate('Go back to resource'), $this->url('site/resource-id', ['controller' => $this->params()->fromRoute('resource'), 'action' => 'show'], true), ['class' => 'btn btn-danger text-light', 'role' => 'button']) ?>
        <?php else: ?>
        <?php //= $this->cancelButton() ?>
        <?= $hyperlink($translate('Cancel'), $this->url('site/resource', ['controller' => $this->params()->fromRoute('resource'), 'action' => 'browse'], true), ['class' => 'btn btn-danger text-light', 'role' => 'button']) ?>
        <?php endif; ?>
        <button type="submit" name="edit-resource-submit" class="button"><?= $escape($submitLabel) ?></button>
    </div>

    <?= $this->form()->closeTag() ?>

    <?= $partial('contribute/site/contribution/form-inputs-default') ?>

    <?php //= $partial('common/resource-form-templates') ?>

</div>
